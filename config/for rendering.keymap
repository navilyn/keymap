/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// LAYERS

#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUNC    3

// MACROS

#define SUPER LC(LSHIFT)
#define SUPER2 LA(LC(LSHIFT))

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp SEMICOLON>, <&kp SQT>;
        };

        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&mt LEFT_ALT DELETE>, <&helixregistry>;
        };

        td_delete: td_delete {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DELETE";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp ESCAPE>, <&kp CAPSLOCK>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_cword {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&caps_word>;
        };

        delword {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <11 12 13>;
        };

        entercombo {
            bindings = <&kp ENTER>;
            key-positions = <16 17 18>;
        };

        newline {
            bindings = <&kp LS(ENTER)>;
            key-positions = <19 18 17 16>;
        };

        deleteall {
            bindings = <&delall>;
            key-positions = <10 11 12 13>;
        };

        toggame {
            bindings = <&tog 4>;
            key-positions = <9 0 1 8>;
        };
    };

    macros {
        vim_quit: vim_quit {
            label = "ZM_vim_quit";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp ESC &kp COLON &kp W &kp Q>;
        };

        helixregistry: helixregistry {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp PLUS>;
            label = "HELIXREGISTRY";
        };

        delall: delall {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp BACKSPACE>;
            label = "DELALL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
	  &kp Q       &kp W       &kp E        &kp R         &kp T               &kp Y            &kp U            &kp I        &kp O       &td0            	
	  &hm LGUI A  &hm LALT S  &hm LCTRL D  &hm LSHIFT F  &kp G               &kp H            &hm RSHIFT J     &hm RCTRL K  &hm RALT L  &hm LEFT_WIN P  	
	  &kp Z       &kp X       &kp C        &kp V         &kp B               &kp N            &kp M            &kp COMMA    &kp DOT     &kp FSLH        	
                               &td1         &lt 1 SPACE   &mt LEFT_WIN TAB    &mt RCTRL ENTER  &lt 2 BACKSPACE  &td_delete
            >;
        };

        raise {
            bindings = <
	  &kp PRINTSCREEN  &kp LA(LEFT)  &kp UP    &kp LA(RIGHT)  &kp PG_UP    &kp PLUS   &kp N7  &kp N8  &kp N9  &kp ASTERISK  	
	  &kp LEFT_WIN     &kp LEFT      &kp DOWN  &kp RIGHT      &kp PG_DN    &kp MINUS  &kp N4  &kp N5  &kp N6  &kp SLASH     	
	  &none &none &none &kp HOME       &kp END      &kp N0     &kp N1  &kp N2  &kp N3  &kp DOT       	
                                      &trans    &trans         &trans       &trans     &trans  &trans
            >;
        };

        lower {
            bindings = <
	  &kp EXCL   &kp AT     &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTERISK  &kp LPAR  &kp RIGHT_PARENTHESIS  	
	  &kp GRAVE  &kp TILDE &none &none &none &kp MINUS  &kp EQUAL  &kp LBKT      &kp RBKT  &kp PIPE               	
	  &kp TILDE  &none &none &none &none  &kp UNDER  &kp PLUS   &kp LBRC      &kp RBRC  &kp BACKSLASH          	
                             &trans    &trans    &trans       &trans     &trans     &trans
            >;
        };

        both {
            bindings = <
	  &kp F1          &kp F2        &kp F3        &kp F4        &kp F5         &kp F6          &kp F7          &kp F8            &kp F9           &kp F10  	
	  &bt BT_CLR_ALL  &bt BT_PRV    &bt BT_NXT    &mkp LCLK     &mkp RCLK      &soft_off       &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT       &kp F11  	
	  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP      &mmv MOVE_RIGHT  &kp F12  	
                                     &sys_reset    &trans        &bootloader    &bootloader     &trans          &sys_reset
            >;
        };

        game {
            bindings = <
	  &kp Q  &kp W  &kp E      &kp R      &kp T        &kp Y    &kp U   &kp I         &kp O    &kp SEMI  	
	  &kp A  &kp S  &kp D      &kp F      &kp G        &kp H    &kp J   &kp K         &kp L    &kp P     	
	  &kp Z  &kp X  &kp C      &kp V      &kp B        &kp N    &kp M   &kp COMMA     &kp DOT  &kp FSLH  	
                     &kp LCTRL  &kp SPACE  &kp LSHFT    &kp TAB  &kp F3  &lt 5 ESCAPE
            >;
        };

        lower_game {
            bindings = <
	  &kp N1    &kp N2    &kp N3     &kp N4     &kp N5     &kp N6     &kp N7     &kp N8     &kp N9    &kp N0    	
	  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &kp F11    &kp F12    &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  	
	  &kp F1    &kp F2    &kp F3     &kp F4     &kp F5     &kp F6     &kp F7     &kp F8     &kp F9    &kp F10   	
                           &kp F11    &kp SPACE  &kp TAB    &kp ENTER  &kp BSPC  &none 	
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        funcwhenboth {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
